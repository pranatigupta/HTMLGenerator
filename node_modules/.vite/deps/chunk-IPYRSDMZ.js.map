{
  "version": 3,
  "sources": ["../../@lexical/selection/LexicalSelection.dev.mjs"],
  "sourcesContent": ["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport { $isTextNode, $isElementNode, $isParagraphNode, $getCharacterOffsets, $isRootNode, $getNodeByKey, $getPreviousSelection, $createTextNode, $isRangeSelection, $getRoot, $isRootOrShadowRoot, $hasAncestor, $isLeafNode, $setSelection, $getAdjacentNode, $isDecoratorNode, $isLineBreakNode } from 'lexical';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nconst CSS_TO_STYLES = new Map();\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction getDOMTextNode(element) {\n  let node = element;\n  while (node != null) {\n    if (node.nodeType === Node.TEXT_NODE) {\n      return node;\n    }\n    node = node.firstChild;\n  }\n  return null;\n}\nfunction getDOMIndexWithinParent(node) {\n  const parent = node.parentNode;\n  if (parent == null) {\n    throw new Error('Should never happen');\n  }\n  return [parent, Array.from(parent.childNodes).indexOf(node)];\n}\n\n/**\n * Creates a selection range for the DOM.\n * @param editor - The lexical editor.\n * @param anchorNode - The anchor node of a selection.\n * @param _anchorOffset - The amount of space offset from the anchor to the focus.\n * @param focusNode - The current focus.\n * @param _focusOffset - The amount of space offset from the focus to the anchor.\n * @returns The range of selection for the DOM that was created.\n */\nfunction createDOMRange(editor, anchorNode, _anchorOffset, focusNode, _focusOffset) {\n  const anchorKey = anchorNode.getKey();\n  const focusKey = focusNode.getKey();\n  const range = document.createRange();\n  let anchorDOM = editor.getElementByKey(anchorKey);\n  let focusDOM = editor.getElementByKey(focusKey);\n  let anchorOffset = _anchorOffset;\n  let focusOffset = _focusOffset;\n  if ($isTextNode(anchorNode)) {\n    anchorDOM = getDOMTextNode(anchorDOM);\n  }\n  if ($isTextNode(focusNode)) {\n    focusDOM = getDOMTextNode(focusDOM);\n  }\n  if (anchorNode === undefined || focusNode === undefined || anchorDOM === null || focusDOM === null) {\n    return null;\n  }\n  if (anchorDOM.nodeName === 'BR') {\n    [anchorDOM, anchorOffset] = getDOMIndexWithinParent(anchorDOM);\n  }\n  if (focusDOM.nodeName === 'BR') {\n    [focusDOM, focusOffset] = getDOMIndexWithinParent(focusDOM);\n  }\n  const firstChild = anchorDOM.firstChild;\n  if (anchorDOM === focusDOM && firstChild != null && firstChild.nodeName === 'BR' && anchorOffset === 0 && focusOffset === 0) {\n    focusOffset = 1;\n  }\n  try {\n    range.setStart(anchorDOM, anchorOffset);\n    range.setEnd(focusDOM, focusOffset);\n  } catch (e) {\n    return null;\n  }\n  if (range.collapsed && (anchorOffset !== focusOffset || anchorKey !== focusKey)) {\n    // Range is backwards, we need to reverse it\n    range.setStart(focusDOM, focusOffset);\n    range.setEnd(anchorDOM, anchorOffset);\n  }\n  return range;\n}\n\n/**\n * Creates DOMRects, generally used to help the editor find a specific location on the screen.\n * @param editor - The lexical editor\n * @param range - A fragment of a document that can contain nodes and parts of text nodes.\n * @returns The selectionRects as an array.\n */\nfunction createRectsFromDOMRange(editor, range) {\n  const rootElement = editor.getRootElement();\n  if (rootElement === null) {\n    return [];\n  }\n  const rootRect = rootElement.getBoundingClientRect();\n  const computedStyle = getComputedStyle(rootElement);\n  const rootPadding = parseFloat(computedStyle.paddingLeft) + parseFloat(computedStyle.paddingRight);\n  const selectionRects = Array.from(range.getClientRects());\n  let selectionRectsLength = selectionRects.length;\n  //sort rects from top left to bottom right.\n  selectionRects.sort((a, b) => {\n    const top = a.top - b.top;\n    // Some rects match position closely, but not perfectly,\n    // so we give a 3px tolerance.\n    if (Math.abs(top) <= 3) {\n      return a.left - b.left;\n    }\n    return top;\n  });\n  let prevRect;\n  for (let i = 0; i < selectionRectsLength; i++) {\n    const selectionRect = selectionRects[i];\n    // Exclude rects that overlap preceding Rects in the sorted list.\n    const isOverlappingRect = prevRect && prevRect.top <= selectionRect.top && prevRect.top + prevRect.height > selectionRect.top && prevRect.left + prevRect.width > selectionRect.left;\n    // Exclude selections that span the entire element\n    const selectionSpansElement = selectionRect.width + rootPadding === rootRect.width;\n    if (isOverlappingRect || selectionSpansElement) {\n      selectionRects.splice(i--, 1);\n      selectionRectsLength--;\n      continue;\n    }\n    prevRect = selectionRect;\n  }\n  return selectionRects;\n}\n\n/**\n * Creates an object containing all the styles and their values provided in the CSS string.\n * @param css - The CSS string of styles and their values.\n * @returns The styleObject containing all the styles and their values.\n */\nfunction getStyleObjectFromRawCSS(css) {\n  const styleObject = {};\n  const styles = css.split(';');\n  for (const style of styles) {\n    if (style !== '') {\n      const [key, value] = style.split(/:([^]+)/); // split on first colon\n      if (key && value) {\n        styleObject[key.trim()] = value.trim();\n      }\n    }\n  }\n  return styleObject;\n}\n\n/**\n * Given a CSS string, returns an object from the style cache.\n * @param css - The CSS property as a string.\n * @returns The value of the given CSS property.\n */\nfunction getStyleObjectFromCSS(css) {\n  let value = CSS_TO_STYLES.get(css);\n  if (value === undefined) {\n    value = getStyleObjectFromRawCSS(css);\n    CSS_TO_STYLES.set(css, value);\n  }\n  {\n    // Freeze the value in DEV to prevent accidental mutations\n    Object.freeze(value);\n  }\n  return value;\n}\n\n/**\n * Gets the CSS styles from the style object.\n * @param styles - The style object containing the styles to get.\n * @returns A string containing the CSS styles and their values.\n */\nfunction getCSSFromStyleObject(styles) {\n  let css = '';\n  for (const style in styles) {\n    if (style) {\n      css += `${style}: ${styles[style]};`;\n    }\n  }\n  return css;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nfunction $updateElementNodeProperties(target, source) {\n  target.__first = source.__first;\n  target.__last = source.__last;\n  target.__size = source.__size;\n  target.__format = source.__format;\n  target.__indent = source.__indent;\n  target.__dir = source.__dir;\n  return target;\n}\nfunction $updateTextNodeProperties(target, source) {\n  target.__format = source.__format;\n  target.__style = source.__style;\n  target.__mode = source.__mode;\n  target.__detail = source.__detail;\n  return target;\n}\nfunction $updateParagraphNodeProperties(target, source) {\n  target.__textFormat = source.__textFormat;\n  return target;\n}\n\n/**\n * Returns a copy of a node, but generates a new key for the copy.\n * @param node - The node to be cloned.\n * @returns The clone of the node.\n */\nfunction $cloneWithProperties(node) {\n  const constructor = node.constructor;\n  // @ts-expect-error\n  const clone = constructor.clone(node);\n  clone.__parent = node.__parent;\n  clone.__next = node.__next;\n  clone.__prev = node.__prev;\n  if ($isElementNode(node) && $isElementNode(clone)) {\n    return $updateElementNodeProperties(clone, node);\n  }\n  if ($isTextNode(node) && $isTextNode(clone)) {\n    return $updateTextNodeProperties(clone, node);\n  }\n  if ($isParagraphNode(node) && $isParagraphNode(clone)) {\n    return $updateParagraphNodeProperties(clone, node);\n  }\n  return clone;\n}\n\n/**\n * Generally used to append text content to HTML and JSON. Grabs the text content and \"slices\"\n * it to be generated into the new TextNode.\n * @param selection - The selection containing the node whose TextNode is to be edited.\n * @param textNode - The TextNode to be edited.\n * @returns The updated TextNode.\n */\nfunction $sliceSelectedTextNodeContent(selection, textNode) {\n  const anchorAndFocus = selection.getStartEndPoints();\n  if (textNode.isSelected(selection) && !textNode.isSegmented() && !textNode.isToken() && anchorAndFocus !== null) {\n    const [anchor, focus] = anchorAndFocus;\n    const isBackward = selection.isBackward();\n    const anchorNode = anchor.getNode();\n    const focusNode = focus.getNode();\n    const isAnchor = textNode.is(anchorNode);\n    const isFocus = textNode.is(focusNode);\n    if (isAnchor || isFocus) {\n      const [anchorOffset, focusOffset] = $getCharacterOffsets(selection);\n      const isSame = anchorNode.is(focusNode);\n      const isFirst = textNode.is(isBackward ? focusNode : anchorNode);\n      const isLast = textNode.is(isBackward ? anchorNode : focusNode);\n      let startOffset = 0;\n      let endOffset = undefined;\n      if (isSame) {\n        startOffset = anchorOffset > focusOffset ? focusOffset : anchorOffset;\n        endOffset = anchorOffset > focusOffset ? anchorOffset : focusOffset;\n      } else if (isFirst) {\n        const offset = isBackward ? focusOffset : anchorOffset;\n        startOffset = offset;\n        endOffset = undefined;\n      } else if (isLast) {\n        const offset = isBackward ? anchorOffset : focusOffset;\n        startOffset = 0;\n        endOffset = offset;\n      }\n      textNode.__text = textNode.__text.slice(startOffset, endOffset);\n      return textNode;\n    }\n  }\n  return textNode;\n}\n\n/**\n * Determines if the current selection is at the end of the node.\n * @param point - The point of the selection to test.\n * @returns true if the provided point offset is in the last possible position, false otherwise.\n */\nfunction $isAtNodeEnd(point) {\n  if (point.type === 'text') {\n    return point.offset === point.getNode().getTextContentSize();\n  }\n  const node = point.getNode();\n  if (!$isElementNode(node)) {\n    throw Error(`isAtNodeEnd: node must be a TextNode or ElementNode`);\n  }\n  return point.offset === node.getChildrenSize();\n}\n\n/**\n * Trims text from a node in order to shorten it, eg. to enforce a text's max length. If it deletes text\n * that is an ancestor of the anchor then it will leave 2 indents, otherwise, if no text content exists, it deletes\n * the TextNode. It will move the focus to either the end of any left over text or beginning of a new TextNode.\n * @param editor - The lexical editor.\n * @param anchor - The anchor of the current selection, where the selection should be pointing.\n * @param delCount - The amount of characters to delete. Useful as a dynamic variable eg. textContentSize - maxLength;\n */\nfunction $trimTextContentFromAnchor(editor, anchor, delCount) {\n  // Work from the current selection anchor point\n  let currentNode = anchor.getNode();\n  let remaining = delCount;\n  if ($isElementNode(currentNode)) {\n    const descendantNode = currentNode.getDescendantByIndex(anchor.offset);\n    if (descendantNode !== null) {\n      currentNode = descendantNode;\n    }\n  }\n  while (remaining > 0 && currentNode !== null) {\n    if ($isElementNode(currentNode)) {\n      const lastDescendant = currentNode.getLastDescendant();\n      if (lastDescendant !== null) {\n        currentNode = lastDescendant;\n      }\n    }\n    let nextNode = currentNode.getPreviousSibling();\n    let additionalElementWhitespace = 0;\n    if (nextNode === null) {\n      let parent = currentNode.getParentOrThrow();\n      let parentSibling = parent.getPreviousSibling();\n      while (parentSibling === null) {\n        parent = parent.getParent();\n        if (parent === null) {\n          nextNode = null;\n          break;\n        }\n        parentSibling = parent.getPreviousSibling();\n      }\n      if (parent !== null) {\n        additionalElementWhitespace = parent.isInline() ? 0 : 2;\n        nextNode = parentSibling;\n      }\n    }\n    let text = currentNode.getTextContent();\n    // If the text is empty, we need to consider adding in two line breaks to match\n    // the content if we were to get it from its parent.\n    if (text === '' && $isElementNode(currentNode) && !currentNode.isInline()) {\n      // TODO: should this be handled in core?\n      text = '\\n\\n';\n    }\n    const currentNodeSize = text.length;\n    if (!$isTextNode(currentNode) || remaining >= currentNodeSize) {\n      const parent = currentNode.getParent();\n      currentNode.remove();\n      if (parent != null && parent.getChildrenSize() === 0 && !$isRootNode(parent)) {\n        parent.remove();\n      }\n      remaining -= currentNodeSize + additionalElementWhitespace;\n      currentNode = nextNode;\n    } else {\n      const key = currentNode.getKey();\n      // See if we can just revert it to what was in the last editor state\n      const prevTextContent = editor.getEditorState().read(() => {\n        const prevNode = $getNodeByKey(key);\n        if ($isTextNode(prevNode) && prevNode.isSimpleText()) {\n          return prevNode.getTextContent();\n        }\n        return null;\n      });\n      const offset = currentNodeSize - remaining;\n      const slicedText = text.slice(0, offset);\n      if (prevTextContent !== null && prevTextContent !== text) {\n        const prevSelection = $getPreviousSelection();\n        let target = currentNode;\n        if (!currentNode.isSimpleText()) {\n          const textNode = $createTextNode(prevTextContent);\n          currentNode.replace(textNode);\n          target = textNode;\n        } else {\n          currentNode.setTextContent(prevTextContent);\n        }\n        if ($isRangeSelection(prevSelection) && prevSelection.isCollapsed()) {\n          const prevOffset = prevSelection.anchor.offset;\n          target.select(prevOffset, prevOffset);\n        }\n      } else if (currentNode.isSimpleText()) {\n        // Split text\n        const isSelected = anchor.key === key;\n        let anchorOffset = anchor.offset;\n        // Move offset to end if it's less than the remaining number, otherwise\n        // we'll have a negative splitStart.\n        if (anchorOffset < remaining) {\n          anchorOffset = currentNodeSize;\n        }\n        const splitStart = isSelected ? anchorOffset - remaining : 0;\n        const splitEnd = isSelected ? anchorOffset : offset;\n        if (isSelected && splitStart === 0) {\n          const [excessNode] = currentNode.splitText(splitStart, splitEnd);\n          excessNode.remove();\n        } else {\n          const [, excessNode] = currentNode.splitText(splitStart, splitEnd);\n          excessNode.remove();\n        }\n      } else {\n        const textNode = $createTextNode(slicedText);\n        currentNode.replace(textNode);\n      }\n      remaining = 0;\n    }\n  }\n}\n\n/**\n * Gets the TextNode's style object and adds the styles to the CSS.\n * @param node - The TextNode to add styles to.\n */\nfunction $addNodeStyle(node) {\n  const CSSText = node.getStyle();\n  const styles = getStyleObjectFromRawCSS(CSSText);\n  CSS_TO_STYLES.set(CSSText, styles);\n}\nfunction $patchStyle(target, patch) {\n  const prevStyles = getStyleObjectFromCSS('getStyle' in target ? target.getStyle() : target.style);\n  const newStyles = Object.entries(patch).reduce((styles, [key, value]) => {\n    if (value instanceof Function) {\n      styles[key] = value(prevStyles[key]);\n    } else if (value === null) {\n      delete styles[key];\n    } else {\n      styles[key] = value;\n    }\n    return styles;\n  }, {\n    ...prevStyles\n  } || {});\n  const newCSSText = getCSSFromStyleObject(newStyles);\n  target.setStyle(newCSSText);\n  CSS_TO_STYLES.set(newCSSText, newStyles);\n}\n\n/**\n * Applies the provided styles to the TextNodes in the provided Selection.\n * Will update partially selected TextNodes by splitting the TextNode and applying\n * the styles to the appropriate one.\n * @param selection - The selected node(s) to update.\n * @param patch - The patch to apply, which can include multiple styles. { CSSProperty: value }. Can also accept a function that returns the new property value.\n */\nfunction $patchStyleText(selection, patch) {\n  const selectedNodes = selection.getNodes();\n  const selectedNodesLength = selectedNodes.length;\n  const anchorAndFocus = selection.getStartEndPoints();\n  if (anchorAndFocus === null) {\n    return;\n  }\n  const [anchor, focus] = anchorAndFocus;\n  const lastIndex = selectedNodesLength - 1;\n  let firstNode = selectedNodes[0];\n  let lastNode = selectedNodes[lastIndex];\n  if (selection.isCollapsed() && $isRangeSelection(selection)) {\n    $patchStyle(selection, patch);\n    return;\n  }\n  const firstNodeText = firstNode.getTextContent();\n  const firstNodeTextLength = firstNodeText.length;\n  const focusOffset = focus.offset;\n  let anchorOffset = anchor.offset;\n  const isBefore = anchor.isBefore(focus);\n  let startOffset = isBefore ? anchorOffset : focusOffset;\n  let endOffset = isBefore ? focusOffset : anchorOffset;\n  const startType = isBefore ? anchor.type : focus.type;\n  const endType = isBefore ? focus.type : anchor.type;\n  const endKey = isBefore ? focus.key : anchor.key;\n\n  // This is the case where the user only selected the very end of the\n  // first node so we don't want to include it in the formatting change.\n  if ($isTextNode(firstNode) && startOffset === firstNodeTextLength) {\n    const nextSibling = firstNode.getNextSibling();\n    if ($isTextNode(nextSibling)) {\n      // we basically make the second node the firstNode, changing offsets accordingly\n      anchorOffset = 0;\n      startOffset = 0;\n      firstNode = nextSibling;\n    }\n  }\n\n  // This is the case where we only selected a single node\n  if (selectedNodes.length === 1) {\n    if ($isTextNode(firstNode) && firstNode.canHaveFormat()) {\n      startOffset = startType === 'element' ? 0 : anchorOffset > focusOffset ? focusOffset : anchorOffset;\n      endOffset = endType === 'element' ? firstNodeTextLength : anchorOffset > focusOffset ? anchorOffset : focusOffset;\n\n      // No actual text is selected, so do nothing.\n      if (startOffset === endOffset) {\n        return;\n      }\n\n      // The entire node is selected, so just format it\n      if (startOffset === 0 && endOffset === firstNodeTextLength) {\n        $patchStyle(firstNode, patch);\n        firstNode.select(startOffset, endOffset);\n      } else {\n        // The node is partially selected, so split it into two nodes\n        // and style the selected one.\n        const splitNodes = firstNode.splitText(startOffset, endOffset);\n        const replacement = startOffset === 0 ? splitNodes[0] : splitNodes[1];\n        $patchStyle(replacement, patch);\n        replacement.select(0, endOffset - startOffset);\n      }\n    } // multiple nodes selected.\n  } else {\n    if ($isTextNode(firstNode) && startOffset < firstNode.getTextContentSize() && firstNode.canHaveFormat()) {\n      if (startOffset !== 0) {\n        // the entire first node isn't selected, so split it\n        firstNode = firstNode.splitText(startOffset)[1];\n        startOffset = 0;\n        anchor.set(firstNode.getKey(), startOffset, 'text');\n      }\n      $patchStyle(firstNode, patch);\n    }\n    if ($isTextNode(lastNode) && lastNode.canHaveFormat()) {\n      const lastNodeText = lastNode.getTextContent();\n      const lastNodeTextLength = lastNodeText.length;\n\n      // The last node might not actually be the end node\n      //\n      // If not, assume the last node is fully-selected unless the end offset is\n      // zero.\n      if (lastNode.__key !== endKey && endOffset !== 0) {\n        endOffset = lastNodeTextLength;\n      }\n\n      // if the entire last node isn't selected, split it\n      if (endOffset !== lastNodeTextLength) {\n        [lastNode] = lastNode.splitText(endOffset);\n      }\n      if (endOffset !== 0 || endType === 'element') {\n        $patchStyle(lastNode, patch);\n      }\n    }\n\n    // style all the text nodes in between\n    for (let i = 1; i < lastIndex; i++) {\n      const selectedNode = selectedNodes[i];\n      const selectedNodeKey = selectedNode.getKey();\n      if ($isTextNode(selectedNode) && selectedNode.canHaveFormat() && selectedNodeKey !== firstNode.getKey() && selectedNodeKey !== lastNode.getKey() && !selectedNode.isToken()) {\n        $patchStyle(selectedNode, patch);\n      }\n    }\n  }\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n\n/**\n * Converts all nodes in the selection that are of one block type to another.\n * @param selection - The selected blocks to be converted.\n * @param createElement - The function that creates the node. eg. $createParagraphNode.\n */\nfunction $setBlocksType(selection, createElement) {\n  if (selection === null) {\n    return;\n  }\n  const anchorAndFocus = selection.getStartEndPoints();\n  const anchor = anchorAndFocus ? anchorAndFocus[0] : null;\n  if (anchor !== null && anchor.key === 'root') {\n    const element = createElement();\n    const root = $getRoot();\n    const firstChild = root.getFirstChild();\n    if (firstChild) {\n      firstChild.replace(element, true);\n    } else {\n      root.append(element);\n    }\n    return;\n  }\n  const nodes = selection.getNodes();\n  const firstSelectedBlock = anchor !== null ? $getAncestor(anchor.getNode(), INTERNAL_$isBlock) : false;\n  if (firstSelectedBlock && nodes.indexOf(firstSelectedBlock) === -1) {\n    nodes.push(firstSelectedBlock);\n  }\n  for (let i = 0; i < nodes.length; i++) {\n    const node = nodes[i];\n    if (!INTERNAL_$isBlock(node)) {\n      continue;\n    }\n    if (!$isElementNode(node)) {\n      throw Error(`Expected block node to be an ElementNode`);\n    }\n    const targetElement = createElement();\n    targetElement.setFormat(node.getFormatType());\n    targetElement.setIndent(node.getIndent());\n    node.replace(targetElement, true);\n  }\n}\nfunction isPointAttached(point) {\n  return point.getNode().isAttached();\n}\nfunction $removeParentEmptyElements(startingNode) {\n  let node = startingNode;\n  while (node !== null && !$isRootOrShadowRoot(node)) {\n    const latest = node.getLatest();\n    const parentNode = node.getParent();\n    if (latest.getChildrenSize() === 0) {\n      node.remove(true);\n    }\n    node = parentNode;\n  }\n}\n\n/**\n * @deprecated\n * Wraps all nodes in the selection into another node of the type returned by createElement.\n * @param selection - The selection of nodes to be wrapped.\n * @param createElement - A function that creates the wrapping ElementNode. eg. $createParagraphNode.\n * @param wrappingElement - An element to append the wrapped selection and its children to.\n */\nfunction $wrapNodes(selection, createElement, wrappingElement = null) {\n  const anchorAndFocus = selection.getStartEndPoints();\n  const anchor = anchorAndFocus ? anchorAndFocus[0] : null;\n  const nodes = selection.getNodes();\n  const nodesLength = nodes.length;\n  if (anchor !== null && (nodesLength === 0 || nodesLength === 1 && anchor.type === 'element' && anchor.getNode().getChildrenSize() === 0)) {\n    const target = anchor.type === 'text' ? anchor.getNode().getParentOrThrow() : anchor.getNode();\n    const children = target.getChildren();\n    let element = createElement();\n    element.setFormat(target.getFormatType());\n    element.setIndent(target.getIndent());\n    children.forEach(child => element.append(child));\n    if (wrappingElement) {\n      element = wrappingElement.append(element);\n    }\n    target.replace(element);\n    return;\n  }\n  let topLevelNode = null;\n  let descendants = [];\n  for (let i = 0; i < nodesLength; i++) {\n    const node = nodes[i];\n    // Determine whether wrapping has to be broken down into multiple chunks. This can happen if the\n    // user selected multiple Root-like nodes that have to be treated separately as if they are\n    // their own branch. I.e. you don't want to wrap a whole table, but rather the contents of each\n    // of each of the cell nodes.\n    if ($isRootOrShadowRoot(node)) {\n      $wrapNodesImpl(selection, descendants, descendants.length, createElement, wrappingElement);\n      descendants = [];\n      topLevelNode = node;\n    } else if (topLevelNode === null || topLevelNode !== null && $hasAncestor(node, topLevelNode)) {\n      descendants.push(node);\n    } else {\n      $wrapNodesImpl(selection, descendants, descendants.length, createElement, wrappingElement);\n      descendants = [node];\n    }\n  }\n  $wrapNodesImpl(selection, descendants, descendants.length, createElement, wrappingElement);\n}\n\n/**\n * Wraps each node into a new ElementNode.\n * @param selection - The selection of nodes to wrap.\n * @param nodes - An array of nodes, generally the descendants of the selection.\n * @param nodesLength - The length of nodes.\n * @param createElement - A function that creates the wrapping ElementNode. eg. $createParagraphNode.\n * @param wrappingElement - An element to wrap all the nodes into.\n * @returns\n */\nfunction $wrapNodesImpl(selection, nodes, nodesLength, createElement, wrappingElement = null) {\n  if (nodes.length === 0) {\n    return;\n  }\n  const firstNode = nodes[0];\n  const elementMapping = new Map();\n  const elements = [];\n  // The below logic is to find the right target for us to\n  // either insertAfter/insertBefore/append the corresponding\n  // elements to. This is made more complicated due to nested\n  // structures.\n  let target = $isElementNode(firstNode) ? firstNode : firstNode.getParentOrThrow();\n  if (target.isInline()) {\n    target = target.getParentOrThrow();\n  }\n  let targetIsPrevSibling = false;\n  while (target !== null) {\n    const prevSibling = target.getPreviousSibling();\n    if (prevSibling !== null) {\n      target = prevSibling;\n      targetIsPrevSibling = true;\n      break;\n    }\n    target = target.getParentOrThrow();\n    if ($isRootOrShadowRoot(target)) {\n      break;\n    }\n  }\n  const emptyElements = new Set();\n\n  // Find any top level empty elements\n  for (let i = 0; i < nodesLength; i++) {\n    const node = nodes[i];\n    if ($isElementNode(node) && node.getChildrenSize() === 0) {\n      emptyElements.add(node.getKey());\n    }\n  }\n  const movedNodes = new Set();\n\n  // Move out all leaf nodes into our elements array.\n  // If we find a top level empty element, also move make\n  // an element for that.\n  for (let i = 0; i < nodesLength; i++) {\n    const node = nodes[i];\n    let parent = node.getParent();\n    if (parent !== null && parent.isInline()) {\n      parent = parent.getParent();\n    }\n    if (parent !== null && $isLeafNode(node) && !movedNodes.has(node.getKey())) {\n      const parentKey = parent.getKey();\n      if (elementMapping.get(parentKey) === undefined) {\n        const targetElement = createElement();\n        targetElement.setFormat(parent.getFormatType());\n        targetElement.setIndent(parent.getIndent());\n        elements.push(targetElement);\n        elementMapping.set(parentKey, targetElement);\n        // Move node and its siblings to the new\n        // element.\n        parent.getChildren().forEach(child => {\n          targetElement.append(child);\n          movedNodes.add(child.getKey());\n          if ($isElementNode(child)) {\n            // Skip nested leaf nodes if the parent has already been moved\n            child.getChildrenKeys().forEach(key => movedNodes.add(key));\n          }\n        });\n        $removeParentEmptyElements(parent);\n      }\n    } else if (emptyElements.has(node.getKey())) {\n      if (!$isElementNode(node)) {\n        throw Error(`Expected node in emptyElements to be an ElementNode`);\n      }\n      const targetElement = createElement();\n      targetElement.setFormat(node.getFormatType());\n      targetElement.setIndent(node.getIndent());\n      elements.push(targetElement);\n      node.remove(true);\n    }\n  }\n  if (wrappingElement !== null) {\n    for (let i = 0; i < elements.length; i++) {\n      const element = elements[i];\n      wrappingElement.append(element);\n    }\n  }\n  let lastElement = null;\n\n  // If our target is Root-like, let's see if we can re-adjust\n  // so that the target is the first child instead.\n  if ($isRootOrShadowRoot(target)) {\n    if (targetIsPrevSibling) {\n      if (wrappingElement !== null) {\n        target.insertAfter(wrappingElement);\n      } else {\n        for (let i = elements.length - 1; i >= 0; i--) {\n          const element = elements[i];\n          target.insertAfter(element);\n        }\n      }\n    } else {\n      const firstChild = target.getFirstChild();\n      if ($isElementNode(firstChild)) {\n        target = firstChild;\n      }\n      if (firstChild === null) {\n        if (wrappingElement) {\n          target.append(wrappingElement);\n        } else {\n          for (let i = 0; i < elements.length; i++) {\n            const element = elements[i];\n            target.append(element);\n            lastElement = element;\n          }\n        }\n      } else {\n        if (wrappingElement !== null) {\n          firstChild.insertBefore(wrappingElement);\n        } else {\n          for (let i = 0; i < elements.length; i++) {\n            const element = elements[i];\n            firstChild.insertBefore(element);\n            lastElement = element;\n          }\n        }\n      }\n    }\n  } else {\n    if (wrappingElement) {\n      target.insertAfter(wrappingElement);\n    } else {\n      for (let i = elements.length - 1; i >= 0; i--) {\n        const element = elements[i];\n        target.insertAfter(element);\n        lastElement = element;\n      }\n    }\n  }\n  const prevSelection = $getPreviousSelection();\n  if ($isRangeSelection(prevSelection) && isPointAttached(prevSelection.anchor) && isPointAttached(prevSelection.focus)) {\n    $setSelection(prevSelection.clone());\n  } else if (lastElement !== null) {\n    lastElement.selectEnd();\n  } else {\n    selection.dirty = true;\n  }\n}\n\n/**\n * Determines if the default character selection should be overridden. Used with DecoratorNodes\n * @param selection - The selection whose default character selection may need to be overridden.\n * @param isBackward - Is the selection backwards (the focus comes before the anchor)?\n * @returns true if it should be overridden, false if not.\n */\nfunction $shouldOverrideDefaultCharacterSelection(selection, isBackward) {\n  const possibleNode = $getAdjacentNode(selection.focus, isBackward);\n  return $isDecoratorNode(possibleNode) && !possibleNode.isIsolated() || $isElementNode(possibleNode) && !possibleNode.isInline() && !possibleNode.canBeEmpty();\n}\n\n/**\n * Moves the selection according to the arguments.\n * @param selection - The selected text or nodes.\n * @param isHoldingShift - Is the shift key being held down during the operation.\n * @param isBackward - Is the selection selected backwards (the focus comes before the anchor)?\n * @param granularity - The distance to adjust the current selection.\n */\nfunction $moveCaretSelection(selection, isHoldingShift, isBackward, granularity) {\n  selection.modify(isHoldingShift ? 'extend' : 'move', isBackward, granularity);\n}\n\n/**\n * Tests a parent element for right to left direction.\n * @param selection - The selection whose parent is to be tested.\n * @returns true if the selections' parent element has a direction of 'rtl' (right to left), false otherwise.\n */\nfunction $isParentElementRTL(selection) {\n  const anchorNode = selection.anchor.getNode();\n  const parent = $isRootNode(anchorNode) ? anchorNode : anchorNode.getParentOrThrow();\n  return parent.getDirection() === 'rtl';\n}\n\n/**\n * Moves selection by character according to arguments.\n * @param selection - The selection of the characters to move.\n * @param isHoldingShift - Is the shift key being held down during the operation.\n * @param isBackward - Is the selection backward (the focus comes before the anchor)?\n */\nfunction $moveCharacter(selection, isHoldingShift, isBackward) {\n  const isRTL = $isParentElementRTL(selection);\n  $moveCaretSelection(selection, isHoldingShift, isBackward ? !isRTL : isRTL, 'character');\n}\n\n/**\n * Expands the current Selection to cover all of the content in the editor.\n * @param selection - The current selection.\n */\nfunction $selectAll(selection) {\n  const anchor = selection.anchor;\n  const focus = selection.focus;\n  const anchorNode = anchor.getNode();\n  const topParent = anchorNode.getTopLevelElementOrThrow();\n  const root = topParent.getParentOrThrow();\n  let firstNode = root.getFirstDescendant();\n  let lastNode = root.getLastDescendant();\n  let firstType = 'element';\n  let lastType = 'element';\n  let lastOffset = 0;\n  if ($isTextNode(firstNode)) {\n    firstType = 'text';\n  } else if (!$isElementNode(firstNode) && firstNode !== null) {\n    firstNode = firstNode.getParentOrThrow();\n  }\n  if ($isTextNode(lastNode)) {\n    lastType = 'text';\n    lastOffset = lastNode.getTextContentSize();\n  } else if (!$isElementNode(lastNode) && lastNode !== null) {\n    lastNode = lastNode.getParentOrThrow();\n  }\n  if (firstNode && lastNode) {\n    anchor.set(firstNode.getKey(), 0, firstType);\n    focus.set(lastNode.getKey(), lastOffset, lastType);\n  }\n}\n\n/**\n * Returns the current value of a CSS property for Nodes, if set. If not set, it returns the defaultValue.\n * @param node - The node whose style value to get.\n * @param styleProperty - The CSS style property.\n * @param defaultValue - The default value for the property.\n * @returns The value of the property for node.\n */\nfunction $getNodeStyleValueForProperty(node, styleProperty, defaultValue) {\n  const css = node.getStyle();\n  const styleObject = getStyleObjectFromCSS(css);\n  if (styleObject !== null) {\n    return styleObject[styleProperty] || defaultValue;\n  }\n  return defaultValue;\n}\n\n/**\n * Returns the current value of a CSS property for TextNodes in the Selection, if set. If not set, it returns the defaultValue.\n * If all TextNodes do not have the same value, it returns an empty string.\n * @param selection - The selection of TextNodes whose value to find.\n * @param styleProperty - The CSS style property.\n * @param defaultValue - The default value for the property, defaults to an empty string.\n * @returns The value of the property for the selected TextNodes.\n */\nfunction $getSelectionStyleValueForProperty(selection, styleProperty, defaultValue = '') {\n  let styleValue = null;\n  const nodes = selection.getNodes();\n  const anchor = selection.anchor;\n  const focus = selection.focus;\n  const isBackward = selection.isBackward();\n  const endOffset = isBackward ? focus.offset : anchor.offset;\n  const endNode = isBackward ? focus.getNode() : anchor.getNode();\n  if ($isRangeSelection(selection) && selection.isCollapsed() && selection.style !== '') {\n    const css = selection.style;\n    const styleObject = getStyleObjectFromCSS(css);\n    if (styleObject !== null && styleProperty in styleObject) {\n      return styleObject[styleProperty];\n    }\n  }\n  for (let i = 0; i < nodes.length; i++) {\n    const node = nodes[i];\n\n    // if no actual characters in the end node are selected, we don't\n    // include it in the selection for purposes of determining style\n    // value\n    if (i !== 0 && endOffset === 0 && node.is(endNode)) {\n      continue;\n    }\n    if ($isTextNode(node)) {\n      const nodeStyleValue = $getNodeStyleValueForProperty(node, styleProperty, defaultValue);\n      if (styleValue === null) {\n        styleValue = nodeStyleValue;\n      } else if (styleValue !== nodeStyleValue) {\n        // multiple text nodes are in the selection and they don't all\n        // have the same style.\n        styleValue = '';\n        break;\n      }\n    }\n  }\n  return styleValue === null ? defaultValue : styleValue;\n}\n\n/**\n * This function is for internal use of the library.\n * Please do not use it as it may change in the future.\n */\nfunction INTERNAL_$isBlock(node) {\n  if ($isDecoratorNode(node)) {\n    return false;\n  }\n  if (!$isElementNode(node) || $isRootOrShadowRoot(node)) {\n    return false;\n  }\n  const firstChild = node.getFirstChild();\n  const isLeafElement = firstChild === null || $isLineBreakNode(firstChild) || $isTextNode(firstChild) || firstChild.isInline();\n  return !node.isInline() && node.canBeEmpty() !== false && isLeafElement;\n}\nfunction $getAncestor(node, predicate) {\n  let parent = node;\n  while (parent !== null && parent.getParent() !== null && !predicate(parent)) {\n    parent = parent.getParentOrThrow();\n  }\n  return predicate(parent) ? parent : null;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/** @deprecated renamed to {@link $trimTextContentFromAnchor} by @lexical/eslint-plugin rules-of-lexical */\nconst trimTextContentFromAnchor = $trimTextContentFromAnchor;\n\nexport { $addNodeStyle, $cloneWithProperties, $getSelectionStyleValueForProperty, $isAtNodeEnd, $isParentElementRTL, $moveCaretSelection, $moveCharacter, $patchStyleText, $selectAll, $setBlocksType, $shouldOverrideDefaultCharacterSelection, $sliceSelectedTextNodeContent, $trimTextContentFromAnchor, $wrapNodes, createDOMRange, createRectsFromDOMRange, getStyleObjectFromCSS, trimTextContentFromAnchor };\n"],
  "mappings": "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",
  "names": []
}
